name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    name: CI/CD Pipeline
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        id: run-tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage
        continue-on-error: true

      - name: Generate CI Summary (tests + coverage)
        uses: actions/github-script@v6
        env:
          TEST_OUTCOME: ${{ steps.run-tests.outcome }}
        with:
          script: |
            const fs = require('fs');
            const summaryPath = process.env.GITHUB_STEP_SUMMARY;

            // Header
            fs.appendFileSync(summaryPath, '# üìä Test & Coverage Report\n\n');

            // Tests section
            const testsPassed = (process.env.TEST_OUTCOME === 'success');
            const testIcon = testsPassed ? '‚úÖ' : '‚ùå';
            const testStatus = testsPassed ? 'Passed' : 'Failed';

            fs.appendFileSync(summaryPath, `## ${testIcon} Tests: ${testStatus}\n\n`);

            // Coverage section
            const covFile = 'coverage/proyectoFinal/lcov.info';
            if (fs.existsSync(covFile)) {
              const s = fs.readFileSync(covFile, 'utf8');

              // Parse all metrics from lcov.info
              let totalLines = 0, hitLines = 0;
              let totalFunctions = 0, hitFunctions = 0;
              let totalBranches = 0, hitBranches = 0;

              const lines = s.split('\n');
              for (const line of lines) {
                if (line.startsWith('LF:')) totalLines += parseInt(line.substring(3));
                else if (line.startsWith('LH:')) hitLines += parseInt(line.substring(3));
                else if (line.startsWith('FNF:')) totalFunctions += parseInt(line.substring(4));
                else if (line.startsWith('FNH:')) hitFunctions += parseInt(line.substring(4));
                else if (line.startsWith('BRF:')) totalBranches += parseInt(line.substring(4));
                else if (line.startsWith('BRH:')) hitBranches += parseInt(line.substring(4));
              }

              // Calculate percentages
              const linesPct = totalLines ? ((hitLines / totalLines) * 100).toFixed(2) : 'N/A';
              const funcsPct = totalFunctions ? ((hitFunctions / totalFunctions) * 100).toFixed(2) : 'N/A';
              const branchesPct = totalBranches ? ((hitBranches / totalBranches) * 100).toFixed(2) : 'N/A';

              // Overall coverage (based on lines)
              const overallPct = parseFloat(linesPct);
              const coverageIcon = overallPct >= 80 ? 'üü¢' : overallPct >= 60 ? 'üü°' : 'üî¥';

              fs.appendFileSync(summaryPath, `## ${coverageIcon} Code Coverage: ${linesPct}%\n\n`);
              fs.appendFileSync(summaryPath, '| Metric | Coverage | Covered | Total |\n');
              fs.appendFileSync(summaryPath, '|--------|----------|---------|-------|\n');
              fs.appendFileSync(summaryPath, `| **Lines** | ${linesPct}% | ${hitLines} | ${totalLines} |\n`);
              fs.appendFileSync(summaryPath, `| **Functions** | ${funcsPct}% | ${hitFunctions} | ${totalFunctions} |\n`);
              fs.appendFileSync(summaryPath, `| **Branches** | ${branchesPct}% | ${hitBranches} | ${totalBranches} |\n`);
              fs.appendFileSync(summaryPath, '\n');

              // Coverage bar
              const barLength = 20;
              const filledLength = Math.round((overallPct / 100) * barLength);
              const emptyLength = barLength - filledLength;
              const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(emptyLength);
              fs.appendFileSync(summaryPath, `### Coverage Bar\n\`${bar}\` ${linesPct}%\n\n`);
            } else {
              fs.appendFileSync(summaryPath, `## ‚ùå Coverage Report Not Found\n\n`);
              fs.appendFileSync(summaryPath, `Could not find coverage file at: \`${covFile}\`\n\n`);
            }

#      - name: Upload coverage to Codecov
#        if: success()
#        uses: codecov/codecov-action@v3
#        with:
#          fail_ci_if_error: false
#          files: ./coverage/final-project-web/lcov.info

#  deploy-staging:
#    needs: build-and-test
#    if: github.ref == 'refs/heads/develop'
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout c√≥digo
#        uses: actions/checkout@v4
#
#      - name: Deploy a Staging
#        run: |
#          echo "üöÄ Desplegando a ambiente de Staging..."
#          # Aqu√≠ puedes agregar tus comandos de deploy a staging
#          # Por ejemplo: npm run deploy:staging
#
#      - name: Notificar deploy de Staging
#        run: echo "‚úÖ Deploy a Staging completado"
#
#  deploy-production:
#    needs: build-and-test
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest

#    steps:
#      - name: Checkout c√≥digo
#        uses: actions/checkout@v4
#
#      - name: Deploy a Production
#        run: |
#          echo "üöÄ Desplegando a ambiente de Producci√≥n..."
#          # Aqu√≠ puedes agregar tus comandos de deploy a producci√≥n
#          # Por ejemplo: npm run deploy:prod
#
#      - name: Notificar deploy de Production
#        run: echo "‚úÖ Deploy a Production completado"
#
#      - name: Crear Release Tag
#        if: success()
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const date = new Date().toISOString().split('T')[0];
#            const tagName = `release-${date}-${context.runNumber}`;
#
#            github.rest.git.createRef({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: `refs/tags/${tagName}`,
#              sha: context.sha
#            });
